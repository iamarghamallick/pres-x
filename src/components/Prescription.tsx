"use client";
import React, { useRef, useState } from 'react';
import { Send, Download, Printer, Loader2, CheckCircle, AlertCircle } from 'lucide-react';
import { telegramService } from '@/lib/telegram';
import { PDFGenerator } from '@/lib/pdfGenerator';

interface PrescriptionProps {
    prescriptionData: {
        personalInfo: {
            name: string;
            age: number;
            gender: string;
            phone?: string;
        };
        doctorInfo: {
            doctorName: string;
            specialization: string;
            licenseNumber: string;
        };
        consultationInfo: {
            consultationDate: any;
            consultationType: string;
            chiefComplaint: string;
            diagnosis: string;
            notes?: string;
        };
        medications: Array<{
            name: string;
            dosage: string;
            frequency: string;
            duration: string;
            instructions: string;
        }>;
        prescription: {
            generatedAt: any;
        };
    };
}

const Prescription: React.FC<PrescriptionProps> = ({ prescriptionData }) => {
    const { personalInfo, doctorInfo, consultationInfo, medications, prescription } = prescriptionData;
    const printRef = useRef<HTMLDivElement>(null);

    // State management
    const [isGeneratingPDF, setIsGeneratingPDF] = useState(false);
    const [isSendingTelegram, setIsSendingTelegram] = useState(false);
    const [notification, setNotification] = useState<{
        type: 'success' | 'error' | 'info';
        message: string;
    } | null>(null);

    const handlePrint = () => {
        window.print();
    };

    const formatDate = (timestamp: any) => {
        const date = new Date(timestamp.seconds * 1000);
        return date.toLocaleDateString();
    };

    const showNotification = (type: 'success' | 'error' | 'info', message: string) => {
        setNotification({ type, message });
        setTimeout(() => setNotification(null), 5000);
    };

    const handleDownloadPDF = async () => {
        if (!printRef.current) return;

        try {
            setIsGeneratingPDF(true);
            const pdfBlob = await PDFGenerator.generateFromElement(printRef.current);
            PDFGenerator.downloadPDF(pdfBlob, `prescription_${personalInfo.name.replace(/\s+/g, '_')}.pdf`);
            showNotification('success', 'PDF downloaded successfully!');
        } catch (error) {
            console.error('Error generating PDF:', error);
            showNotification('error', 'Failed to generate PDF. Please try again.');
        } finally {
            setIsGeneratingPDF(false);
        }
    };

    const handleSendToTelegram = async () => {
        if (!printRef.current || !personalInfo.phone) {
            showNotification('error', 'Phone number is required to send via Telegram.');
            return;
        }

        try {
            setIsSendingTelegram(true);

            // Generate PDF
            const pdfBlob = await PDFGenerator.generateFromElement(printRef.current);

            // Prepare caption
            const caption = `
<b>üìã Prescription for ${personalInfo.name}</b>

üë®‚Äç‚öïÔ∏è <b>Doctor:</b> ${doctorInfo.doctorName}
üè• <b>Specialization:</b> ${doctorInfo.specialization}
üìÖ <b>Date:</b> ${formatDate(consultationInfo.consultationDate)}
üîç <b>Diagnosis:</b> ${consultationInfo.diagnosis}

üíä <b>Medications:</b> ${medications.length} prescribed

<i>Generated by PresX - Prescription Management System</i>
      `.trim();

            // Send to Telegram
            const result = await telegramService.sendDocument(
                personalInfo.phone,
                pdfBlob,
                caption
            );

            if (result.ok) {
                showNotification('success', 'Prescription sent to Telegram successfully!');
            } else {
                // Handle specific Telegram errors
                if (result.description?.includes('chat not found')) {
                    showNotification('error',
                        `Unable to send to ${personalInfo.phone}. Please ensure the patient has started a conversation with our Telegram bot first.`
                    );
                } else {
                    showNotification('error',
                        `Failed to send to Telegram: ${result.description || 'Unknown error'}`
                    );
                }
            }
        } catch (error) {
            console.error('Error sending to Telegram:', error);
            showNotification('error', 'Failed to send prescription. Please try again.');
        } finally {
            setIsSendingTelegram(false);
        }
    };

    return (
        <div className="relative">
            {/* Notification */}
            {notification && (
                <div className={`fixed top-4 right-4 z-50 p-4 rounded-lg shadow-lg flex items-center gap-2 ${notification.type === 'success' ? 'bg-green-100 text-green-800 border border-green-200' :
                        notification.type === 'error' ? 'bg-red-100 text-red-800 border border-red-200' :
                            'bg-blue-100 text-blue-800 border border-blue-200'
                    }`}>
                    {notification.type === 'success' && <CheckCircle className="w-5 h-5" />}
                    {notification.type === 'error' && <AlertCircle className="w-5 h-5" />}
                    <span className="text-sm font-medium">{notification.message}</span>
                </div>
            )}

            {/* Prescription Content */}
            <div className="p-6 max-w-3xl mx-auto bg-white text-black" ref={printRef}>
                <div className="flex justify-between items-center border-b pb-4 mb-4">
                    <div>
                        <h1 className="text-2xl font-bold">Prescription</h1>
                        <p className="text-sm">Generated on: {formatDate(prescription.generatedAt)}</p>
                    </div>
                    <div className="text-right">
                        <p className="font-semibold">{doctorInfo.doctorName}</p>
                        <p>{doctorInfo.specialization}</p>
                        <p>License: {doctorInfo.licenseNumber}</p>
                    </div>
                </div>

                <section className="mb-4">
                    <h2 className="font-semibold text-lg">Patient Details</h2>
                    <p>Name: {personalInfo.name}</p>
                    <p>Age/Gender: {personalInfo.age} / {personalInfo.gender}</p>
                    {personalInfo.phone && <p>Phone: {personalInfo.phone}</p>}
                </section>

                <section className="mb-4">
                    <h2 className="font-semibold text-lg">Consultation</h2>
                    <p>Date: {formatDate(consultationInfo.consultationDate)}</p>
                    <p>Type: {consultationInfo.consultationType}</p>
                    <p>Chief Complaint: {consultationInfo.chiefComplaint}</p>
                    <p>Diagnosis: {consultationInfo.diagnosis}</p>
                    {consultationInfo.notes && <p>Notes: {consultationInfo.notes}</p>}
                </section>

                <section className="mb-4">
                    <h2 className="font-semibold text-lg">Medications</h2>
                    {medications.map((med, index) => (
                        <div key={index} className="border p-2 mb-2 rounded">
                            <p><strong>Name:</strong> {med.name}</p>
                            <p><strong>Dosage:</strong> {med.dosage}</p>
                            <p><strong>Frequency:</strong> {med.frequency}</p>
                            <p><strong>Duration:</strong> {med.duration}</p>
                            <p><strong>Instructions:</strong> {med.instructions}</p>
                        </div>
                    ))}
                </section>

                {/* Action Buttons */}
                <div className="flex flex-wrap gap-3 print:hidden">
                    <button
                        onClick={handlePrint}
                        className="flex items-center gap-2 bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700 transition-colors"
                    >
                        <Printer className="w-4 h-4" />
                        Print Prescription
                    </button>

                    <button
                        onClick={handleDownloadPDF}
                        disabled={isGeneratingPDF}
                        className="flex items-center gap-2 bg-green-600 text-white px-4 py-2 rounded hover:bg-green-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                    >
                        {isGeneratingPDF ? (
                            <Loader2 className="w-4 h-4 animate-spin" />
                        ) : (
                            <Download className="w-4 h-4" />
                        )}
                        {isGeneratingPDF ? 'Generating...' : 'Download PDF'}
                    </button>

                    {personalInfo.phone && (
                        <button
                            onClick={handleSendToTelegram}
                            disabled={isSendingTelegram}
                            className="flex items-center gap-2 bg-purple-600 text-white px-4 py-2 rounded hover:bg-purple-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
                        >
                            {isSendingTelegram ? (
                                <Loader2 className="w-4 h-4 animate-spin" />
                            ) : (
                                <Send className="w-4 h-4" />
                            )}
                            {isSendingTelegram ? 'Sending...' : 'Send to Telegram'}
                        </button>
                    )}
                </div>

                {/* Telegram Bot Info */}
                {personalInfo.phone && (
                    <div className="mt-4 p-3 bg-blue-50 border border-blue-200 rounded print:hidden">
                        <p className="text-sm text-blue-800">
                            <strong>üì± Telegram Integration:</strong> To receive prescriptions via Telegram,
                            the patient must first start a conversation with our bot.
                            <a
                                href={telegramService.getBotStartLink()}
                                target="_blank"
                                rel="noopener noreferrer"
                                className="underline hover:text-blue-900 ml-1"
                            >
                                Click here to start
                            </a>
                        </p>
                    </div>
                )}
            </div>
        </div>
    );
};

export default Prescription;